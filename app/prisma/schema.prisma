generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/krankmeldung-app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String
    manager       String?   // Manager field for company hierarchy
    accounts      Account[]
    sessions      Session[]
    sickLeaves    SickLeave[]
    
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Krankmeldungs-spezifische Tabellen
model SickLeave {
    id                 String   @id @default(cuid())
    userId             String
    startDate          DateTime
    endDate            DateTime
    status             String   @default("active") // active, expired
    customerInfoType   String   // informed, not_informed
    substituteName     String?  // Name der Vertretung (wenn Kunde informiert)
    customerContact    String?  // Kontaktdaten (wenn Kunde nicht informiert)
    tasks              String?  // Zu übernehmende Aufgaben
    ccRecipients       String[] // E-Mail-Adressen der weiteren Empfänger
    
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    projects           Project[]
    
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
}

model Project {
    id           String    @id @default(cuid())
    sickLeaveId  String
    customer     String
    project      String
    
    sickLeave    SickLeave @relation(fields: [sickLeaveId], references: [id], onDelete: Cascade)
}
